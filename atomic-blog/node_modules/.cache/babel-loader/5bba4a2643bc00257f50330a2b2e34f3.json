{"ast":null,"code":"var _jsxFileName = \"/home/jibril/Documents/React Jonas/atomic-blog/src/PostContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { faker } from \"@faker-js/faker\"; // const PostContext = createContext();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\n\nfunction PostProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Derived state. These are the posts that will actually be displayed\n\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      onAddPost: handleAddPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostProvider, \"VXdyzwc12x+7JxoZ0bFmmpPp0GI=\");\n\n_c = PostProvider;\n\nfunction usePosts() {\n  _s2();\n\n  const context = useContext(PostContext);\n  return context;\n}\n\n_s2(usePosts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { PostProvider, usePosts };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["useState","faker","createRandomPost","title","hacker","adjective","noun","body","phrase","PostProvider","children","posts","setPosts","Array","from","length","searchQuery","setSearchQuery","searchedPosts","filter","post","toLowerCase","includes","handleAddPost","handleClearPosts","onClearPosts","onAddPost","usePosts","context","useContext","PostContext"],"sources":["/home/jibril/Documents/React Jonas/atomic-blog/src/PostContext.js"],"sourcesContent":["import { useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\n// const PostContext = createContext();\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase(),\n  };\n}\nfunction PostProvider({ children }) {\n  const [posts, setPosts] = useState(() =>\n    Array.from({ length: 30 }, () => createRandomPost())\n  );\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Derived state. These are the posts that will actually be displayed\n  const searchedPosts =\n    searchQuery.length > 0\n      ? posts.filter((post) =>\n          `${post.title} ${post.body}`\n            .toLowerCase()\n            .includes(searchQuery.toLowerCase())\n        )\n      : posts;\n\n  function handleAddPost(post) {\n    setPosts((posts) => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n  return (\n    <PostContext.Provider\n      value={{\n        posts: searchedPosts,\n        onClearPosts: handleClearPosts,\n        searchQuery: searchQuery,\n        setSearchQuery: setSearchQuery,\n        onAddPost: handleAddPost,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n}\nfunction usePosts() {\n  const context = useContext(PostContext);\n  return context;\n}\nexport { PostProvider, usePosts };\n"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,iBAAtB,C,CACA;;;;AACA,SAASC,gBAAT,GAA4B;EAC1B,OAAO;IACLC,KAAK,EAAG,GAAEF,KAAK,CAACG,MAAN,CAAaC,SAAb,EAAyB,IAAGJ,KAAK,CAACG,MAAN,CAAaE,IAAb,EAAoB,EADrD;IAELC,IAAI,EAAEN,KAAK,CAACG,MAAN,CAAaI,MAAb;EAFD,CAAP;AAID;;AACD,SAASC,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,MACjCa,KAAK,CAACC,IAAN,CAAW;IAAEC,MAAM,EAAE;EAAV,CAAX,EAA2B,MAAMb,gBAAgB,EAAjD,CADgC,CAAlC;EAGA,MAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C,CAJkC,CAMlC;;EACA,MAAMkB,aAAa,GACjBF,WAAW,CAACD,MAAZ,GAAqB,CAArB,GACIJ,KAAK,CAACQ,MAAN,CAAcC,IAAD,IACV,GAAEA,IAAI,CAACjB,KAAM,IAAGiB,IAAI,CAACb,IAAK,EAA3B,CACGc,WADH,GAEGC,QAFH,CAEYN,WAAW,CAACK,WAAZ,EAFZ,CADF,CADJ,GAMIV,KAPN;;EASA,SAASY,aAAT,CAAuBH,IAAvB,EAA6B;IAC3BR,QAAQ,CAAED,KAAD,IAAW,CAACS,IAAD,EAAO,GAAGT,KAAV,CAAZ,CAAR;EACD;;EAED,SAASa,gBAAT,GAA4B;IAC1BZ,QAAQ,CAAC,EAAD,CAAR;EACD;;EACD,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLD,KAAK,EAAEO,aADF;MAELO,YAAY,EAAED,gBAFT;MAGLR,WAAW,EAAEA,WAHR;MAILC,cAAc,EAAEA,cAJX;MAKLS,SAAS,EAAEH;IALN,CADT;IAAA,UASGb;EATH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GApCQD,Y;;KAAAA,Y;;AAqCT,SAASkB,QAAT,GAAoB;EAAA;;EAClB,MAAMC,OAAO,GAAGC,UAAU,CAACC,WAAD,CAA1B;EACA,OAAOF,OAAP;AACD;;IAHQD,Q;;AAIT,SAASlB,YAAT,EAAuBkB,QAAvB"},"metadata":{},"sourceType":"module"}